package com.liferay.marketplace.orphen.fragment.cleaner.portlet.action;

import com.liferay.fragment.model.FragmentEntry;
import com.liferay.fragment.service.FragmentEntryLinkLocalService;
import com.liferay.fragment.service.FragmentEntryLocalService;
import com.liferay.marketplace.orphen.fragment.cleaner.constants.OrphenFragmentCleanerWebPortletKeys;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.util.PortalUtil;

import java.util.List;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(
		property= {
				"javax.portlet.name="+OrphenFragmentCleanerWebPortletKeys.ORPHENFRAGMENTCLEANERWEB,
				"mvc.command.name=/fragment_cleaner"
		},
		service = MVCActionCommand.class
)

public class FragmentCleanerMVCActionCommand extends BaseMVCActionCommand{

	@Override
	protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {
		
//		long groupId = PortalUtil.getScopeGroupId(actionRequest);
		
		_log.info("Group Id ::");

//		List<FragmentEntry> fragments = _fragmentEntryLocalService.getFragmentEntries(QueryUtil.ALL_POS, QueryUtil.ALL_POS);
//		
//		for (FragmentEntry fragmentEntry : fragments) {
//			long fragmentId = fragmentEntry.getFragmentEntryId();
			
//			int fragmentEntryCount = _fragmentEntryLinkLocalService.getAllFragmentEntryLinksCountByFragmentEntryId(groupId, fragmentId);
			
			
//		}
		
	}
	
	private static final Log _log = LogFactoryUtil.getLog(FragmentCleanerMVCActionCommand.class);
	
	@Reference
	private FragmentEntryLocalService _fragmentEntryLocalService;
	
	@Reference
	private FragmentEntryLinkLocalService _fragmentEntryLinkLocalService;

}
