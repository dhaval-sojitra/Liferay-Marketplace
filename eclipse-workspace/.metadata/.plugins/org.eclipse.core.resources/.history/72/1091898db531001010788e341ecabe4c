package com.ignek.marketplace.orphen.fragment.cleaner.portlet.action;

import com.ignek.marketplace.orphen.fragment.cleaner.constants.OrphenFragmentCleanerWebPortletKeys;
import com.liferay.fragment.model.FragmentEntry;
import com.liferay.fragment.model.FragmentEntryLink;
import com.liferay.fragment.service.FragmentEntryLinkLocalService;
import com.liferay.fragment.service.FragmentEntryLocalService;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextThreadLocal;

import java.util.List;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(
		property = {
				"javax.portlet.name="+OrphenFragmentCleanerWebPortletKeys.ORPHENFRAGMENTCLEANERWEB,
				"mvc.command.name=/orphen_fragment_cleaner"
		},
		service = MVCActionCommand.class
)
public class OrphenFragmentCleanerMVCActionCommand extends BaseMVCActionCommand {

	@Override
	protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {

		ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext();

		long groupId = serviceContext.getScopeGroupId();

		List<FragmentEntry> fragments = _fragmentEntryLocalService.getFragmentEntries(QueryUtil.ALL_POS,
				QueryUtil.ALL_POS);

		_log.info(groupId + "::group");

		for (FragmentEntry fragmentEntry : fragments) {
			long fragmentId = fragmentEntry.getFragmentEntryId();

			int fragmentUsesCount = _fragmentEntryLinkLocalService
					.getAllFragmentEntryLinksCountByFragmentEntryId(groupId, fragmentId);

			if (fragmentUsesCount == 0) {
				try {
					String fragmentName = _fragmentEntryLocalService.getFragmentEntry(fragmentId).getName();
//					_fragmentEntryLocalService.deleteFragmentEntry(fragmentId);

					_log.info("Fragment deleted with no uses::" + fragmentName);
				} catch (Exception e) {
					_log.error("Error occurred while delete fragement::" + e.getMessage(), e);
				}
			}
		}

	}

	private Boolean isFragmentUsed(long fragmentEntryId) {

		boolean isFragment = false;

		List<FragmentEntryLink> fragEntryLinks = _fragmentEntryLinkLocalService.getFragmentEntryLinks(QueryUtil.ALL_POS,
				QueryUtil.ALL_POS);

		for (FragmentEntryLink fragmentEntryLink : fragEntryLinks) {

			if (fragmentEntryLink.getFragmentEntryId() == fragmentEntryId) {
				isFragment = true;
			}
		}

		return isFragment;

	}

	private static final Log _log = LogFactoryUtil.getLog(OrphenFragmentCleanerMVCActionCommand.class);

	@Reference
	private FragmentEntryLocalService _fragmentEntryLocalService;

	@Reference
	private FragmentEntryLinkLocalService _fragmentEntryLinkLocalService;

}
