package com.ignek.marketplace.orphen.fragment.cleaner.portlet.action;

import com.ignek.marketplace.orphen.fragment.cleaner.constants.OrphenFragmentCleanerWebPortletKeys;
import com.ignek.marketplace.orphen.fragment.cleaner.log.DefaultOrphenLogFactory;
import com.ignek.marketplace.orphen.fragment.cleaner.log.OrphenLog;
import com.ignek.marketplace.orphen.fragment.cleaner.log.OrphenLogFactory;
import com.liferay.fragment.model.FragmentEntry;
import com.liferay.fragment.service.FragmentEntryLinkLocalService;
import com.liferay.fragment.service.FragmentEntryLocalService;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;

import java.util.List;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(
		property = {
				"javax.portlet.name="+OrphenFragmentCleanerWebPortletKeys.ORPHEN_FRAGMENT_CLEANER_WEB_PORTLET_KEY,
				"mvc.command.name=/orphen_fragment_cleaner"
		},
		service = MVCActionCommand.class
)
public class OrphenFragmentCleanerMVCActionCommand extends BaseMVCActionCommand {
	
	@Reference
    private OrphenLogFactory orphenLogFactory;
	
	@Override
	protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {

		List<FragmentEntry> fragments = _fragmentEntryLocalService.getFragmentEntries(QueryUtil.ALL_POS,
				QueryUtil.ALL_POS);
		
//		try {
			 OrphenLog installationLog = (OrphenLog) orphenLogFactory.getLog(OrphenFragmentCleanerWebPortletKeys.LIVE_LOG);
//		}catch (Exception e) {
//			_log.error("Log Error::"+e.getMessage(),e);
//		}

		fragments.stream().filter(fragmentEntry -> !isFragmentUsed(fragmentEntry.getFragmentEntryId()))
				.forEach(fragmentEntry -> {
					long fragmentId = fragmentEntry.getFragmentEntryId();

					try {
						String fragmentName = _fragmentEntryLocalService.getFragmentEntry(fragmentId).getName();
//						_fragmentEntryLocalService.deleteFragmentEntry(fragmentId);
						
						orphenLog.info("Fragment deleted with no uses::" + fragmentName);
						_log.info("Fragment deleted with no uses::" + fragmentName);
					} catch (Exception e) {
//						orphenLog.error("Fragments not found");

						_log.error("Error occurred while delete fragement::" + e.getMessage(), e);
					}

				});
		
	}

	private Boolean isFragmentUsed(long fragmentEntryId) {
		
		long count = _fragmentEntryLinkLocalService.getFragmentEntryLinksCountByFragmentEntryId(fragmentEntryId);
		return count > 0;

	}
//	
//	@Reference
//	private DefaultOrphenLogFactory defaultOrphenLogFactory;
	
//	private OrphenLog orphenLog = (OrphenLog) defaultOrphenLogFactory.getLog(OrphenFragmentCleanerMVCActionCommand.class);
	
	private static final Log _log = LogFactoryUtil.getLog(OrphenFragmentCleanerMVCActionCommand.class.getName());

	@Reference
	private FragmentEntryLocalService _fragmentEntryLocalService;

	@Reference
	private FragmentEntryLinkLocalService _fragmentEntryLinkLocalService;

}
